import{j as e}from"./jsx-runtime-D_zvdyIk.js";import{r as o}from"./index-D4lIrffr.js";const i=({show:t,eventModal:s,children:l})=>{const[r,d]=o.useState(t),n=a=>{s(a)};return o.useEffect(()=>{d(t)},[t]),r?e.jsxs("div",{role:"dialog","aria-modal":"true","aria-labelledby":"modal-title",className:"modal",tabIndex:-1,children:[e.jsx("button",{type:"button",className:"modal-overlay",onClick:n,"aria-label":"Cerrar modal",tabIndex:0,children:e.jsx("span",{className:"visually-hidden",children:"Cerrar modal"})}),e.jsx("div",{className:"modal-content",children:e.jsx("div",{className:"modal-container",children:e.jsxs("div",{className:"padding-v-20 padding-h-20",children:[e.jsx("button",{type:"button",className:"modal-close-button",onClick:a=>{a.stopPropagation(),n(a)},"aria-label":"Cerrar modal",tabIndex:0,children:"X"}),e.jsx("div",{id:"modal-title",className:"modal-title",children:l})]})})})]}):null};i.__docgenInfo={description:`Componente Modal que proporciona una ventana modal accesible.
Permite mostrar contenido en una ventana superpuesta con opciones de cierre.

@param {ModalProps} props - Propiedades del componente
@param {boolean} props.show - Estado de visibilidad del modal
@param {(e: React.MouseEvent) => void} props.eventModal - Función que se ejecuta al cerrar el modal
@param {React.ReactNode} props.children - Contenido a mostrar dentro del modal
@returns {JSX.Element | null} Elemento modal o null si no está visible`,methods:[],displayName:"Modal",props:{show:{required:!0,tsType:{name:"boolean"},description:""},eventModal:{required:!0,tsType:{name:"signature",type:"function",raw:"(e: React.MouseEvent<Element, MouseEvent> | React.MouseEvent<HTMLButtonElement, MouseEvent>) => void",signature:{arguments:[{type:{name:"union",raw:"React.MouseEvent<Element, MouseEvent> | React.MouseEvent<HTMLButtonElement, MouseEvent>",elements:[{name:"ReactMouseEvent",raw:"React.MouseEvent<Element, MouseEvent>",elements:[{name:"Element"},{name:"MouseEvent"}]},{name:"ReactMouseEvent",raw:"React.MouseEvent<HTMLButtonElement, MouseEvent>",elements:[{name:"HTMLButtonElement"},{name:"MouseEvent"}]}]},name:"e"}],return:{name:"void"}}},description:""},children:{required:!0,tsType:{name:"ReactReactNode",raw:"React.ReactNode"},description:""}}};export{i as M};
