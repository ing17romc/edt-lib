import{j as o}from"./jsx-runtime-D_zvdyIk.js";import{I as u}from"./index-DBRegMt0.js";import{C as l,b as p}from"./enums-Ca2RdD1G.js";const d=({id:t,text:a,icon:s,size:i=l.MD,disabled:e=!1,onClick:n})=>{const r=()=>`imageButton ${e?p.DISABLED:""}`,c=()=>n?"button":"submit";return o.jsx("abbr",{title:a,role:"tooltip",children:o.jsx("button",{className:r(),id:t,type:c(),name:t,disabled:e,onClick:m=>{!e&&n&&n(m)},"aria-label":a,"aria-disabled":e,children:o.jsx(u,{name:s,size:i})})})};d.__docgenInfo={description:`Componente ImageButton que muestra un botón con un ícono.
Proporciona una interfaz consistente para botones con íconos en la aplicación.

@param {ImageButtonProps} props - Propiedades del componente
@param {string} props.id - ID único para el botón
@param {string} props.text - Texto que se mostrará como título del botón
@param {IconName} props.icon - Nombre del ícono a mostrar
@param {IconSize} [props.size='MD'] - Tamaño del botón y el ícono
@param {boolean} [props.disabled=false] - Si el botón está deshabilitado
@param {(e: React.MouseEvent<HTMLButtonElement>) => void} [props.onClick] - Función que se ejecuta al hacer clic
@returns {JSX.Element} Elemento button con ícono y accesibilidad`,methods:[],displayName:"ImageButton",props:{id:{required:!0,tsType:{name:"string"},description:""},text:{required:!0,tsType:{name:"string"},description:""},icon:{required:!0,tsType:{name:"union",raw:"ActionIcons | AlertIcons | AudioAndVideoIcons | CommunicationIcons | ContentIcons | DeviceIcons | EditorIcons | FileIcons | HardwareIcons | ImageIcons | NavigationIcons | NotificationIcons | SocialIcons",elements:[{name:"ActionIcons"},{name:"AlertIcons"},{name:"AudioAndVideoIcons"},{name:"CommunicationIcons"},{name:"ContentIcons"},{name:"DeviceIcons"},{name:"EditorIcons"},{name:"FileIcons"},{name:"HardwareIcons"},{name:"ImageIcons"},{name:"NavigationIcons"},{name:"NotificationIcons"},{name:"SocialIcons"}]},description:""},size:{required:!1,tsType:{name:"ControlSize"},description:"",defaultValue:{value:"ControlSize.MD",computed:!0}},disabled:{required:!1,tsType:{name:"boolean"},description:"",defaultValue:{value:"false",computed:!1}},onClick:{required:!1,tsType:{name:"signature",type:"function",raw:"(e: React.MouseEvent<HTMLButtonElement>) => void",signature:{arguments:[{type:{name:"ReactMouseEvent",raw:"React.MouseEvent<HTMLButtonElement>",elements:[{name:"HTMLButtonElement"}]},name:"e"}],return:{name:"void"}}},description:""}}};export{d as I};
