@use "sass:math";
@use '../../../../scss/variables';
@use '../../../../scss/functions';

$border: 1;
$size-md: 18;
$size-sm: 14;
$size-after: 2;
$label-height: 18;
$label-padding-top: 1;
$label-padding-left: 28;
$label-line-height: 18;
$transition-speed: 0.2s;

.radiobutton {
  position: relative;
  margin-bottom: 0.5rem;
  display: inline-flex;
  align-items: flex-start;
  cursor: pointer;
  user-select: none;
  
  &.required > label {
    color: variables.$red-color;
  }

  &.required {
    input[type='radio'] {
      & + label {
        &::before {
          border: calculateSizeVW($border) solid variables.$red-color;
        }
      }
    }
  }

  input[type='radio'] {
    position: absolute;
    opacity: 0;
    cursor: pointer;
    height: 0;
    width: 0;

    & + label {
      font-size: calculateSizeVW(variables.$font-size-control);
      position: relative;
      height: calculatesizevw($label-height);
      padding-top: calculatesizevw($label-padding-top);
      padding-left: calculatesizevw($label-padding-left);
      cursor: pointer;
      line-height: calculatesizevw($label-line-height);
      display: inline-flex;
      align-items: center;
      transition: color $transition-speed ease;

      &::before {
        content: '';
        position: absolute;
        left: 0;
        top: 50%;
        transform: translateY(-50%);
        width: calculatesizevw($size-md);
        height: calculatesizevw($size-md);
        border: calculateSizeVW($border) solid variables.$black-color;
        border-radius: 50%;
        background-color: variables.$white-color;
        transition: all $transition-speed ease;
      }

      &::after {
        content: '';
        position: absolute;
        left: calculateSizeVW(math.div($size-md - $size-after, 2));
        top: 50%;
        transform: translateY(-50%) scale(0);
        width: calculatesizevw($size-after);
        height: calculatesizevw($size-after);
        border-radius: 50%;
        background-color: variables.$white-color;
        transition: all $transition-speed ease;
      }
    }

    &:checked + label {
      &::before {
        background-color: variables.$primary-color-1;
        border-color: variables.$primary-color-1;
      }
      
      &::after {
        transform: translateY(-50%) scale(1);
      }
    }

    &:disabled + label {
      opacity: 0.6;
      cursor: not-allowed;
      
      &::before {
        background-color: variables.$gray-200;
        border-color: variables.$gray-400;
      }
    }

    &:focus + label::before {
      box-shadow: 0 0 0 2px rgba(variables.$primary-color-1, 0.3);
    }
  }

  /* Estilos para pantallas más grandes */
  @media screen and (min-width: calculateSizePX(functions.$min-with-screen)) {
    input[type='radio'] + label {
      font-size: calculateSizePX(variables.$font-size-control);
      height: calculatesizepx($label-height);
      padding-top: calculatesizepx($label-padding-top);
      padding-left: calculatesizepx($label-padding-left);
      line-height: calculatesizepx($label-line-height);

      &::before {
        width: calculatesizepx($size-md);
        height: calculatesizepx($size-md);
        border-width: calculatesizepx($border);
      }

      &::after {
        left: calculateSizePX(math.div($size-md - $size-after, 2));
        width: calculatesizepx($size-after);
        height: calculatesizepx($size-after);
      }
    }
  }

  /* Estilos para dispositivos móviles */
  @media (hover: none), (pointer: coarse) {
    input[type='radio'] + label {
      font-size: calculateSizeVW(variables.$font-size-control * 0.9);
      padding-left: calculatesizevw($label-padding-left * 0.9);
      
      &::before {
        width: calculatesizevw($size-md * 0.9);
        height: calculatesizevw($size-md * 0.9);
      }
      
      &::after {
        left: calculateSizeVW(math.div($size-md * 0.9 - $size-after * 0.9, 2));
        width: calculatesizevw($size-after * 0.9);
        height: calculatesizevw($size-after * 0.9);
      }
    }
  }
}
