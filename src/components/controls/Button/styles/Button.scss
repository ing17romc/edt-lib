@use '../../../../scss/variables';
@use '../../../../scss/functions';

$button-large: 48;
$font-size-large: variables.$fs-24;
$button-normal: 42;
$font-size-normal: variables.$fs-18;
$button-small: 36;
$font-size-small: variables.$fs-14;
$button-extra-small: 30;
$font-size-extra-small: variables.$fs-12;
$border-radius: 4;
$border-size: 1;

button {
	display: inline;
	border-radius: calculatesizevw($border-radius);
	width: 100%;
	cursor: pointer;

	&:disabled {
		opacity: variables.$disabled-opacity;
	}

	&.primary {
		background-color: variables.$primary-color-1;
		color: variables.$white-color;
		border: calculateSizeVW($border-size) solid variables.$primary-color-1;
	}

	&.secondary {
		background-color: variables.$white-color;
		color: variables.$primary-color-1;
		border: calculateSizeVW($border-size) solid variables.$primary-color-1;
	}

	&.lg {
		height: calculatesizevw($button-large);
		font-size: calculatesizevw($font-size-large);
	}

	&.md {
		height: calculatesizevw($button-normal);
		font-size: calculatesizevw($font-size-normal);
	}

	&.sm {
		height: calculatesizevw($button-small);
		font-size: calculatesizevw($font-size-small);
	}

	&.xs {
		height: calculatesizevw($button-extra-small);
		font-size: calculatesizevw($font-size-extra-small);
	}
}

@media screen and (min-width: calculateSizePX(functions.$min-with-screen)) {
	button {
		border-radius: calculatesizepx($border-radius);

		&.primary {
			border: calculateSizePX($border-size) solid variables.$primary-color-1;
		}

		&.secondary {
			border: calculateSizePX($border-size) solid variables.$primary-color-1;
		}

		&.lg {
			height: calculatesizepx($button-large);
			font-size: calculatesizepx($font-size-large);
		}

		&.md {
			height: calculatesizepx($button-normal);
			font-size: calculatesizepx($font-size-normal);
		}

		&.sm {
			height: calculatesizepx($button-small);
			font-size: calculatesizepx($font-size-small);
		}

		&.xs {
			height: calculatesizepx($button-extra-small);
			font-size: calculatesizepx($font-size-extra-small);
		}
	}
}

@media (hover: none),
(pointer: coarse) {
	button {
		border-radius: calculateSizeVW($border-radius * functions.$size-mobile);

		&.primary {
			border: calculateSizeVW($border-size * functions.$size-mobile) solid variables.$primary-color-1;
		}

		&.secondary {
			border: calculateSizeVW($border-size * functions.$size-mobile) solid variables.$primary-color-1;
		}

		&.lg {
			height: calculateSizeVW($button-large * functions.$size-mobile);
			font-size: calculateSizeVW($font-size-large * functions.$size-mobile);
		}

		&.md {
			height: calculateSizeVW($button-normal * functions.$size-mobile);
			font-size: calculateSizeVW($font-size-normal * functions.$size-mobile);
		}

		&.sm {
			height: calculateSizeVW($button-small * functions.$size-mobile);
			font-size: calculateSizeVW($font-size-small * functions.$size-mobile);
		}

		&.xs {
			height: calculateSizeVW($button-extra-small * functions.$size-mobile);
			font-size: calculateSizeVW($font-size-extra-small * functions.$size-mobile);
		}
	}
}


@media (hover: none),
(pointer: coarse) {
	button {
		border-radius: calculateSizeVW($border-radius * functions.$size-mobile-h);

		&.primary {
			border: calculateSizeVW($border-size * functions.$size-mobile-h) solid variables.$primary-color-1;
		}

		&.secondary {
			border: calculateSizeVW($border-size * functions.$size-mobile-h) solid variables.$primary-color-1;
		}

		&.lg {
			height: calculateSizeVW($button-large * functions.$size-mobile-h);
			font-size: calculateSizeVW($font-size-large * functions.$size-mobile-h);
		}

		&.md {
			height: calculateSizeVW($button-normal * functions.$size-mobile-h);
			font-size: calculateSizeVW($font-size-normal * functions.$size-mobile-h);
		}

		&.sm {
			height: calculateSizeVW($button-small * functions.$size-mobile-h);
			font-size: calculateSizeVW($font-size-small * functions.$size-mobile-h);
		}

		&.xs {
			height: calculateSizeVW($button-extra-small * functions.$size-mobile-h);
			font-size: calculateSizeVW($font-size-extra-small * functions.$size-mobile-h);
		}
	}
}