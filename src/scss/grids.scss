@use './variables.scss';
@use './functions.scss';

$grid-primary-padding-v: 3%;
$grid-primary-column-gap: 1.5%;


$grid-secundary-padding-v: 2%;
$grid-secundary-column-gap: 1%;

@mixin grids($number, $max) {
	$value: $number;

	@if ($number > $max ) {
		$value: $number - $max
	}

	.start-#{$number} {
		grid-column-start: $value;
	}

	.size-#{$number} {
		grid-column-end: span $value;
	}
}

.grid-primary {
	display: grid;
	width: 100%;
	padding-left: $grid-primary-padding-v;
	padding-right: $grid-primary-padding-v;
	grid-template-columns: repeat(12, 1fr);
	grid-column-gap: $grid-primary-column-gap;
	grid-column-start: 1 !important;

	@for $i from 1 through 12 {
		@include grids($i, 12);
	}
}

.grid-primary .grid-primary,
.grid-primary .grid-secondary,
.grid-secondary .grid-primary,
.grid-secondary .grid-secondary {
	display: inline !important;
}

.grid-primary>.grid-secondary {
	display: grid !important;
	width: 100%;
	padding-left: $grid-secundary-padding-v;
	padding-right: $grid-secundary-padding-v;
	grid-template-columns: repeat(24, 1fr);

	grid-column-gap: $grid-secundary-column-gap;
	grid-column-start: 1 !important;
	grid-column-end: span 12 !important;

	@for $i from 1 through 24 {
		@include grids($i, 24);
	}
}

@media screen and (max-width: functions.$max-with-screen),
(hover: none),
(pointer: coarse) {
	.grid-primary {
		grid-template-columns: repeat(6, 1fr);

		@for $i from 1 through 12 {
			@include grids($i, 6);
		}

	}

	.grid-primary>.grid-secondary {
		grid-template-columns: repeat(12, 1fr);
		grid-column-end: span 6 !important;

		@for $i from 1 through 24 {
			@include grids($i, 12);
		}
	}

}