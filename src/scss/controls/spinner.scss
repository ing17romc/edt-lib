@import '../variables.scss';
@import '../functions.scss';

$color-one: $light-blue-color;
$color-two: $primary-color-1;
$color-three: $dark-blue-color;
$bg-spinner: $black-color;

$size-loading: 150;
$border-loading: 2.5;

$position-sm: 5;
$position-md: 15;

div.container-load {
	overflow: hidden;
	z-index: 1000;
	position: fixed;
	width: 100%;
	height: 100%;
	top: 0;
	left: 0;

	background: transparentize($color: $color-one, $amount: 0.8);

	display: flex;
	justify-content: center;
	align-items: center;
	text-align: center;

	.loading {

		justify-content: center;
		align-items: center;
		text-align: center;


		overflow: hidden;
		display: block;
		position: relative;
		width: calculateSizeVW($size-loading);
		height: calculateSizeVW($size-loading);
		top: 0;
		left: 0;
		border-radius: 50%;
		border-width: calculateSizeVW($border-loading);
		border-style: solid;
		border-color: transparent;
		border-top-color: $color-three;
		animation: spin 2s linear infinite;
	}

	.loading:before {
		content: '';
		position: absolute;
		top: calculateSizeVW($position-sm);
		left: calculateSizeVW($position-sm);
		right: calculateSizeVW($position-sm);
		bottom: calculateSizeVW($position-sm);
		border-radius: 50%;
		border: calculateSizeVW($border-loading) solid transparent;
		border-top-color: $color-two;
		animation: spin 3s linear infinite;
	}

	.loading:after {
		content: '';
		position: absolute;
		top: calculateSizeVW($position-md);
		left: calculateSizeVW($position-md);
		right: calculateSizeVW($position-md);
		bottom: calculateSizeVW($position-md);
		border-radius: 50%;
		border: calculateSizeVW($border-loading) solid transparent;
		border-top-color: $bg-spinner;
		animation: spin 1.5s linear infinite;
	}

	@-webkit-keyframes spin {
		0% {
			transform: rotate(0deg);
		}

		100% {
			transform: rotate(360deg);
		}
	}

	@keyframes spin {
		0% {
			transform: rotate(0deg);
		}

		100% {
			transform: rotate(360deg);
		}
	}
}

@media screen and (min-width: calculateSizePX($min-with-screen)) {
	div.container-load {
		.loading {
			width: calculateSizePX($size-loading);
			height: calculateSizePX($size-loading);
			border-width: calculateSizePX($border-loading);
		}

		.loading:before {
			top: calculateSizePX($position-sm);
			left: calculateSizePX($position-sm);
			right: calculateSizePX($position-sm);
			bottom: calculateSizePX($position-sm);
			border: calculateSizePX($border-loading) solid transparent;
			border-top-color: $color-two;
		}

		.loading:after {
			top: calculateSizePX($position-md);
			left: calculateSizePX($position-md);
			right: calculateSizePX($position-md);
			bottom: calculateSizePX($position-md);
			border: calculateSizePX($border-loading) solid transparent;
			border-top-color: $bg-spinner;
		}
	}
}

@media (hover: none),
(pointer: coarse) {
	div.container-load {
		.loading {
			width: calculateSizeVW($size-loading * $size-mobile);
			height: calculateSizeVW($size-loading * $size-mobile);
			border-width: calculateSizeVW($border-loading * $size-mobile);
		}

		.loading:before {
			top: calculateSizeVW($position-sm * $size-mobile);
			left: calculateSizeVW($position-sm * $size-mobile);
			right: calculateSizeVW($position-sm * $size-mobile);
			bottom: calculateSizeVW($position-sm * $size-mobile);
			border: calculateSizeVW($border-loading * $size-mobile) solid transparent;
			border-top-color: $color-two;
		}

		.loading:after {
			top: calculateSizeVW($position-md * $size-mobile);
			left: calculateSizeVW($position-md * $size-mobile);
			right: calculateSizeVW($position-md * $size-mobile);
			bottom: calculateSizeVW($position-md * $size-mobile);
			border: calculateSizeVW($border-loading * $size-mobile) solid transparent;
			border-top-color: $bg-spinner;
		}
	}
}

@media (orientation: landscape) {
	div.container-load {
		.loading {
			width: calculateSizeVW($size-loading * $size-mobile-h);
			height: calculateSizeVW($size-loading * $size-mobile-h);
			border-width: calculateSizeVW($border-loading * $size-mobile-h);
		}

		.loading:before {
			top: calculateSizeVW($position-sm * $size-mobile-h);
			left: calculateSizeVW($position-sm * $size-mobile-h);
			right: calculateSizeVW($position-sm * $size-mobile-h);
			bottom: calculateSizeVW($position-sm * $size-mobile-h);
			border: calculateSizeVW($border-loading * $size-mobile-h) solid transparent;
			border-top-color: $color-two;
		}

		.loading:after {
			top: calculateSizeVW($position-md * $size-mobile-h);
			left: calculateSizeVW($position-md * $size-mobile-h);
			right: calculateSizeVW($position-md * $size-mobile-h);
			bottom: calculateSizeVW($position-md * $size-mobile-h);
			border: calculateSizeVW($border-loading * $size-mobile-h) solid transparent;
			border-top-color: $bg-spinner;
		}
	}
}